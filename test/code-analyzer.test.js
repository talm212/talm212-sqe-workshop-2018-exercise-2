import assert from 'assert';
import {parseCode, subCode} from '../src/js/code-analyzer';

function changeString(code){
    return code.replace(/[\r\n]+/g, '\n')
        .replace(/[\r\n]+/g, '\r\n')
        .replace('\r\n{','{')
        .replace('}\r\n','}');
}

function check1(str){
    return JSON.stringify(subCode(parseCode(changeString(str),true), ''));
}

function check2(str){
    return JSON.stringify(subCode(parseCode(changeString(str),true), '1,2,3'));
}

describe('The javascript parser', () => {
    it('', () => {
        assert.equal(
            check1(''),
            '{"greens":[],"json":{"type":"Program","body":[],"sourceType":"script","loc":{"start":{"line":0,"column":0},"end":{"line":0,"column":0}}},"reds":[],"ignoreList":[]}'
        );
    });

    it('let a = 1;', () => {
        assert.equal(
            check1('let a = 1;'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":5}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":9}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":9}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":10}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":10}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });
});


describe('The parseJson', () => {
    it('function a(x){}', () => {

        assert.equal(
            check1('function a(x){}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":10}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":11},\"end\":{\"line\":1,\"column\":12}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[],\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":15}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":15}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":15}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });


    it('while(i){i++}', () => {
        assert.equal(
            check1('while(i){i++}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"WhileStatement\",\"test\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":6},\"end\":{\"line\":1,\"column\":7}}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"argument\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":10}}},\"prefix\":false,\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}}],\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":13}}},\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":13}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":13}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('if(x>1){let i = 1;}', () => {
        assert.equal(
            check1('if(x>1){let i = 1;}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":3},\"end\":{\"line\":1,\"column\":4}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":5},\"end\":{\"line\":1,\"column\":6}}},\"loc\":{\"start\":{\"line\":1,\"column\":3},\"end\":{\"line\":1,\"column\":6}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":17}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":18}}}],\"loc\":{\"start\":{\"line\":1,\"column\":7},\"end\":{\"line\":1,\"column\":19}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":19}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":19}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('if(x>1){let i = 1;}else{let i = 2;}', () => {
        assert.equal(
            check1('if(x>1){let i = 1;}else{let i = 2;}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":3},\"end\":{\"line\":1,\"column\":4}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":5},\"end\":{\"line\":1,\"column\":6}}},\"loc\":{\"start\":{\"line\":1,\"column\":3},\"end\":{\"line\":1,\"column\":6}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":17}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":18}}}],\"loc\":{\"start\":{\"line\":1,\"column\":7},\"end\":{\"line\":1,\"column\":19}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":29}}},\"init\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":33}}},\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":33}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":34}}}],\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":35}}},\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":35}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":35}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('if(x>1){let i = 1;}else if(x <3){let i = 3;}', () => {
        assert.equal(
            check1('if(x>1){let i = 1;}else if(x <3){let i = 3;}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\">\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":3},\"end\":{\"line\":1,\"column\":4}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":5},\"end\":{\"line\":1,\"column\":6}}},\"loc\":{\"start\":{\"line\":1,\"column\":3},\"end\":{\"line\":1,\"column\":6}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":13}}},\"init\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":17}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":18}}}],\"loc\":{\"start\":{\"line\":1,\"column\":7},\"end\":{\"line\":1,\"column\":19}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":28}}},\"right\":{\"type\":\"Literal\",\"value\":3,\"raw\":\"3\",\"loc\":{\"start\":{\"line\":1,\"column\":30},\"end\":{\"line\":1,\"column\":31}}},\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":31}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":37},\"end\":{\"line\":1,\"column\":38}}},\"init\":{\"type\":\"Literal\",\"value\":3,\"raw\":\"3\",\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":42}}},\"loc\":{\"start\":{\"line\":1,\"column\":37},\"end\":{\"line\":1,\"column\":42}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":33},\"end\":{\"line\":1,\"column\":43}}}],\"loc\":{\"start\":{\"line\":1,\"column\":32},\"end\":{\"line\":1,\"column\":44}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":24},\"end\":{\"line\":1,\"column\":44}}},\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":44}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":44}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('function a(){return true;}', () => {
        assert.equal(
            check1('function a(){return true;}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":10}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Literal\",\"value\":true,\"raw\":\"true\",\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":25}}}],\"loc\":{\"start\":{\"line\":1,\"column\":12},\"end\":{\"line\":1,\"column\":26}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":26}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":26}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('let i = x[3];', () => {
        assert.equal(
            check1('let i = x[3];'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\",\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":5}}},\"init\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":9}}},\"property\":{\"type\":\"Literal\",\"value\":3,\"raw\":\"3\",\"loc\":{\"start\":{\"line\":1,\"column\":10},\"end\":{\"line\":1,\"column\":11}}},\"loc\":{\"start\":{\"line\":1,\"column\":8},\"end\":{\"line\":1,\"column\":12}}},\"loc\":{\"start\":{\"line\":1,\"column\":4},\"end\":{\"line\":1,\"column\":12}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":13}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":13}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });


    it('function foo(b){var a;let a = 2;a = b * a;return a;}', () => {
        assert.equal(
            check2('function foo(){var a;let a = 2;a = a * a;return a;}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"foo\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"params\":[],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":19},\"end\":{\"line\":1,\"column\":20}}},\"init\":null,\"loc\":{\"start\":{\"line\":1,\"column\":19},\"end\":{\"line\":1,\"column\":20}}}],\"kind\":\"var\",\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":21}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"init\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":30}}},\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":30}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":31}}},{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":32}}},\"right\":{\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":40}},\"value\":4,\"type\":\"Literal\",\"raw\":\"4\"},\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":40}}},\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":41}}},{\"type\":\"ReturnStatement\",\"argument\":{\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":40}},\"value\":4,\"type\":\"Literal\",\"raw\":\"4\"},\"loc\":{\"start\":{\"line\":1,\"column\":41},\"end\":{\"line\":1,\"column\":50}}}],\"loc\":{\"start\":{\"line\":1,\"column\":14},\"end\":{\"line\":1,\"column\":51}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":51}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":51}}},\"reds\":[],\"ignoreList\":[0,0,0]}'
        );
    });

    it('function foo(a,b){if(a < b){return a;}else{return b;}}', () => {
        assert.equal(
            check2('function foo(a,b){if(a < b){return a;}else{return b;}}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"foo\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":16}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":22}}},\"right\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":26}}},\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":1,\"column\":26}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":1,\"column\":35},\"end\":{\"line\":1,\"column\":36}}},\"loc\":{\"start\":{\"line\":1,\"column\":28},\"end\":{\"line\":1,\"column\":37}}}],\"loc\":{\"start\":{\"line\":1,\"column\":27},\"end\":{\"line\":1,\"column\":38}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":1,\"column\":50},\"end\":{\"line\":1,\"column\":51}}},\"loc\":{\"start\":{\"line\":1,\"column\":43},\"end\":{\"line\":1,\"column\":52}}}],\"loc\":{\"start\":{\"line\":1,\"column\":42},\"end\":{\"line\":1,\"column\":53}}},\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":53}}}],\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":54}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":54}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":54}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('function foo(x){x[0] = 7;if (x[0] < 3) {x[0] = 8;}return x[0];}', () => {
        assert.equal(
            check2('function foo(x){x[0] = 7;if (x[0] < 3) {x[0] = 8;}return x[0];}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"foo\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":14}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":18},\"end\":{\"line\":1,\"column\":19}}},\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":7,\"raw\":\"7\",\"loc\":{\"start\":{\"line\":1,\"column\":23},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":24}}},\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":25}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":30}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":31},\"end\":{\"line\":1,\"column\":32}}},\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":33}}},\"right\":{\"type\":\"Literal\",\"value\":3,\"raw\":\"3\",\"loc\":{\"start\":{\"line\":1,\"column\":36},\"end\":{\"line\":1,\"column\":37}}},\"loc\":{\"start\":{\"line\":1,\"column\":29},\"end\":{\"line\":1,\"column\":37}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":40},\"end\":{\"line\":1,\"column\":41}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":42},\"end\":{\"line\":1,\"column\":43}}},\"loc\":{\"start\":{\"line\":1,\"column\":40},\"end\":{\"line\":1,\"column\":44}}},\"right\":{\"type\":\"Literal\",\"value\":8,\"raw\":\"8\",\"loc\":{\"start\":{\"line\":1,\"column\":47},\"end\":{\"line\":1,\"column\":48}}},\"loc\":{\"start\":{\"line\":1,\"column\":40},\"end\":{\"line\":1,\"column\":48}}},\"loc\":{\"start\":{\"line\":1,\"column\":40},\"end\":{\"line\":1,\"column\":49}}}],\"loc\":{\"start\":{\"line\":1,\"column\":39},\"end\":{\"line\":1,\"column\":50}}},\"alternate\":null,\"loc\":{\"start\":{\"line\":1,\"column\":25},\"end\":{\"line\":1,\"column\":50}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"MemberExpression\",\"computed\":true,\"object\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":57},\"end\":{\"line\":1,\"column\":58}}},\"property\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":1,\"column\":59},\"end\":{\"line\":1,\"column\":60}}},\"loc\":{\"start\":{\"line\":1,\"column\":57},\"end\":{\"line\":1,\"column\":61}}},\"loc\":{\"start\":{\"line\":1,\"column\":50},\"end\":{\"line\":1,\"column\":62}}}],\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":63}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":63}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":63}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('function foo(x,y,z){z=x+y;return z}', () => {
        assert.equal(
            check2('function foo(x,y,z){z=x+y;return z}'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"foo\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":15},\"end\":{\"line\":1,\"column\":16}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":17},\"end\":{\"line\":1,\"column\":18}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":21}}},\"right\":{\"loc\":{\"start\":{\"line\":1,\"column\":22},\"end\":{\"line\":1,\"column\":25}},\"value\":3,\"type\":\"Literal\",\"raw\":\"3\"},\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":25}}},\"loc\":{\"start\":{\"line\":1,\"column\":20},\"end\":{\"line\":1,\"column\":26}}},{\"type\":\"ReturnStatement\",\"argument\":{\"loc\":{\"start\":{\"line\":1,\"column\":22},\"end\":{\"line\":1,\"column\":25}},\"value\":3,\"type\":\"Literal\",\"raw\":\"3\"},\"loc\":{\"start\":{\"line\":1,\"column\":26},\"end\":{\"line\":1,\"column\":34}}}],\"loc\":{\"start\":{\"line\":1,\"column\":19},\"end\":{\"line\":1,\"column\":35}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":35}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":1,\"column\":35}}},\"reds\":[],\"ignoreList\":[]}'
        );
    });

    it('exp2', () => {
        assert.equal(
            check1('function foo(x, y, z){\n' +
                '    let a = x + 1;\n' +
                '    let b = a + y;\n' +
                '    let c = 0;\n' +
                '    \n' +
                '    if (b < z) {\n' +
                '        c = c + 5;\n' +
                '        return x + y + z + c;\n' +
                '    } else if (b < z * 2) {\n' +
                '        c = c + x + 5;\n' +
                '        return x + y + z + c;\n' +
                '    } else {\n' +
                '        c = c + z + 5;\n' +
                '        return x + y + z + c;\n' +
                '    }\n' +
                '}\n'),
            '{\"greens\":[],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"foo\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":19},\"end\":{\"line\":1,\"column\":20}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"a\",\"loc\":{\"start\":{\"line\":2,\"column\":8},\"end\":{\"line\":2,\"column\":9}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":2,\"column\":16},\"end\":{\"line\":2,\"column\":17}}},\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":17}}},\"loc\":{\"start\":{\"line\":2,\"column\":8},\"end\":{\"line\":2,\"column\":17}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":2,\"column\":4},\"end\":{\"line\":2,\"column\":18}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"b\",\"loc\":{\"start\":{\"line\":3,\"column\":8},\"end\":{\"line\":3,\"column\":9}}},\"init\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":2,\"column\":16},\"end\":{\"line\":2,\"column\":17}}},\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":17}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":3,\"column\":16},\"end\":{\"line\":3,\"column\":17}}},\"loc\":{\"start\":{\"line\":3,\"column\":12},\"end\":{\"line\":3,\"column\":17}}},\"loc\":{\"start\":{\"line\":3,\"column\":8},\"end\":{\"line\":3,\"column\":17}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":3,\"column\":4},\"end\":{\"line\":3,\"column\":18}}},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"c\",\"loc\":{\"start\":{\"line\":4,\"column\":8},\"end\":{\"line\":4,\"column\":9}}},\"init\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":4,\"column\":12},\"end\":{\"line\":4,\"column\":13}}},\"loc\":{\"start\":{\"line\":4,\"column\":8},\"end\":{\"line\":4,\"column\":13}}}],\"kind\":\"let\",\"loc\":{\"start\":{\"line\":4,\"column\":4},\"end\":{\"line\":4,\"column\":14}}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":2,\"column\":16},\"end\":{\"line\":2,\"column\":17}}},\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":17}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":3,\"column\":16},\"end\":{\"line\":3,\"column\":17}}},\"loc\":{\"start\":{\"line\":3,\"column\":12},\"end\":{\"line\":3,\"column\":17}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":6,\"column\":12},\"end\":{\"line\":6,\"column\":13}}},\"loc\":{\"start\":{\"line\":6,\"column\":8},\"end\":{\"line\":6,\"column\":13}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"c\",\"loc\":{\"start\":{\"line\":7,\"column\":8},\"end\":{\"line\":7,\"column\":9}}},\"right\":{\"loc\":{\"start\":{\"line\":7,\"column\":12},\"end\":{\"line\":7,\"column\":17}},\"value\":5,\"type\":\"Literal\",\"raw\":\"5\"},\"loc\":{\"start\":{\"line\":7,\"column\":8},\"end\":{\"line\":7,\"column\":17}}},\"loc\":{\"start\":{\"line\":7,\"column\":8},\"end\":{\"line\":7,\"column\":18}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":8,\"column\":15},\"end\":{\"line\":8,\"column\":16}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":8,\"column\":19},\"end\":{\"line\":8,\"column\":20}}},\"loc\":{\"start\":{\"line\":8,\"column\":15},\"end\":{\"line\":8,\"column\":20}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":8,\"column\":23},\"end\":{\"line\":8,\"column\":24}}},\"loc\":{\"start\":{\"line\":8,\"column\":15},\"end\":{\"line\":8,\"column\":24}}},\"right\":{\"loc\":{\"start\":{\"line\":7,\"column\":12},\"end\":{\"line\":7,\"column\":17}},\"value\":5,\"type\":\"Literal\",\"raw\":\"5\"},\"loc\":{\"start\":{\"line\":8,\"column\":15},\"end\":{\"line\":8,\"column\":28}}},\"loc\":{\"start\":{\"line\":8,\"column\":8},\"end\":{\"line\":8,\"column\":29}}}],\"loc\":{\"start\":{\"line\":6,\"column\":15},\"end\":{\"line\":9,\"column\":5}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":13}}},\"right\":{\"type\":\"Literal\",\"value\":1,\"raw\":\"1\",\"loc\":{\"start\":{\"line\":2,\"column\":16},\"end\":{\"line\":2,\"column\":17}}},\"loc\":{\"start\":{\"line\":2,\"column\":12},\"end\":{\"line\":2,\"column\":17}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":3,\"column\":16},\"end\":{\"line\":3,\"column\":17}}},\"loc\":{\"start\":{\"line\":3,\"column\":12},\"end\":{\"line\":3,\"column\":17}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"*\",\"left\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":9,\"column\":19},\"end\":{\"line\":9,\"column\":20}}},\"right\":{\"type\":\"Literal\",\"value\":2,\"raw\":\"2\",\"loc\":{\"start\":{\"line\":9,\"column\":23},\"end\":{\"line\":9,\"column\":24}}},\"loc\":{\"start\":{\"line\":9,\"column\":19},\"end\":{\"line\":9,\"column\":24}}},\"loc\":{\"start\":{\"line\":9,\"column\":15},\"end\":{\"line\":9,\"column\":24}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"c\",\"loc\":{\"start\":{\"line\":10,\"column\":8},\"end\":{\"line\":10,\"column\":9}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":4,\"column\":12},\"end\":{\"line\":4,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":10,\"column\":16},\"end\":{\"line\":10,\"column\":17}}},\"loc\":{\"start\":{\"line\":10,\"column\":12},\"end\":{\"line\":10,\"column\":17}}},\"right\":{\"type\":\"Literal\",\"value\":5,\"raw\":\"5\",\"loc\":{\"start\":{\"line\":10,\"column\":20},\"end\":{\"line\":10,\"column\":21}}},\"loc\":{\"start\":{\"line\":10,\"column\":12},\"end\":{\"line\":10,\"column\":21}}},\"loc\":{\"start\":{\"line\":10,\"column\":8},\"end\":{\"line\":10,\"column\":21}}},\"loc\":{\"start\":{\"line\":10,\"column\":8},\"end\":{\"line\":10,\"column\":22}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":11,\"column\":15},\"end\":{\"line\":11,\"column\":16}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":11,\"column\":19},\"end\":{\"line\":11,\"column\":20}}},\"loc\":{\"start\":{\"line\":11,\"column\":15},\"end\":{\"line\":11,\"column\":20}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":11,\"column\":23},\"end\":{\"line\":11,\"column\":24}}},\"loc\":{\"start\":{\"line\":11,\"column\":15},\"end\":{\"line\":11,\"column\":24}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":4,\"column\":12},\"end\":{\"line\":4,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":10,\"column\":16},\"end\":{\"line\":10,\"column\":17}}},\"loc\":{\"start\":{\"line\":10,\"column\":12},\"end\":{\"line\":10,\"column\":17}}},\"right\":{\"type\":\"Literal\",\"value\":5,\"raw\":\"5\",\"loc\":{\"start\":{\"line\":10,\"column\":20},\"end\":{\"line\":10,\"column\":21}}},\"loc\":{\"start\":{\"line\":10,\"column\":12},\"end\":{\"line\":10,\"column\":21}}},\"loc\":{\"start\":{\"line\":11,\"column\":15},\"end\":{\"line\":11,\"column\":28}}},\"loc\":{\"start\":{\"line\":11,\"column\":8},\"end\":{\"line\":11,\"column\":29}}}],\"loc\":{\"start\":{\"line\":9,\"column\":26},\"end\":{\"line\":12,\"column\":5}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"c\",\"loc\":{\"start\":{\"line\":13,\"column\":8},\"end\":{\"line\":13,\"column\":9}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":4,\"column\":12},\"end\":{\"line\":4,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":13,\"column\":16},\"end\":{\"line\":13,\"column\":17}}},\"loc\":{\"start\":{\"line\":13,\"column\":12},\"end\":{\"line\":13,\"column\":17}}},\"right\":{\"type\":\"Literal\",\"value\":5,\"raw\":\"5\",\"loc\":{\"start\":{\"line\":13,\"column\":20},\"end\":{\"line\":13,\"column\":21}}},\"loc\":{\"start\":{\"line\":13,\"column\":12},\"end\":{\"line\":13,\"column\":21}}},\"loc\":{\"start\":{\"line\":13,\"column\":8},\"end\":{\"line\":13,\"column\":21}}},\"loc\":{\"start\":{\"line\":13,\"column\":8},\"end\":{\"line\":13,\"column\":22}}},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":14,\"column\":15},\"end\":{\"line\":14,\"column\":16}}},\"right\":{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":14,\"column\":19},\"end\":{\"line\":14,\"column\":20}}},\"loc\":{\"start\":{\"line\":14,\"column\":15},\"end\":{\"line\":14,\"column\":20}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":14,\"column\":23},\"end\":{\"line\":14,\"column\":24}}},\"loc\":{\"start\":{\"line\":14,\"column\":15},\"end\":{\"line\":14,\"column\":24}}},\"right\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"BinaryExpression\",\"operator\":\"+\",\"left\":{\"type\":\"Literal\",\"value\":0,\"raw\":\"0\",\"loc\":{\"start\":{\"line\":4,\"column\":12},\"end\":{\"line\":4,\"column\":13}}},\"right\":{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":13,\"column\":16},\"end\":{\"line\":13,\"column\":17}}},\"loc\":{\"start\":{\"line\":13,\"column\":12},\"end\":{\"line\":13,\"column\":17}}},\"right\":{\"type\":\"Literal\",\"value\":5,\"raw\":\"5\",\"loc\":{\"start\":{\"line\":13,\"column\":20},\"end\":{\"line\":13,\"column\":21}}},\"loc\":{\"start\":{\"line\":13,\"column\":12},\"end\":{\"line\":13,\"column\":21}}},\"loc\":{\"start\":{\"line\":14,\"column\":15},\"end\":{\"line\":14,\"column\":28}}},\"loc\":{\"start\":{\"line\":14,\"column\":8},\"end\":{\"line\":14,\"column\":29}}}],\"loc\":{\"start\":{\"line\":12,\"column\":11},\"end\":{\"line\":15,\"column\":5}}},\"loc\":{\"start\":{\"line\":9,\"column\":11},\"end\":{\"line\":15,\"column\":5}}},\"loc\":{\"start\":{\"line\":6,\"column\":4},\"end\":{\"line\":15,\"column\":5}}}],\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":15,\"column\":6}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":15,\"column\":6}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":15,\"column\":6}}},\"reds\":[],\"ignoreList\":[1,2,3,6,9,12]}'
        );
    });

    it('exp1', () => {
        assert.equal(
            check2('function foo(x, y, z){\n' +
                '    if (x + 1 + y < z) {\n' +
                '        return x + y + z + 5;\n' +
                '    } else if (x + 1 + y < z * 2) {\n' +
                '        return x + y + z + x + 5; \n' +
                '    } else {\n' +
                '        return x + y + z + z + 5;\n' +
                '    }\n' +
                '}\n'),
            '{\"greens\":[3,3],\"json\":{\"type\":\"Program\",\"body\":[{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"foo\",\"loc\":{\"start\":{\"line\":1,\"column\":9},\"end\":{\"line\":1,\"column\":12}}},\"params\":[{\"type\":\"Identifier\",\"name\":\"x\",\"loc\":{\"start\":{\"line\":1,\"column\":13},\"end\":{\"line\":1,\"column\":14}}},{\"type\":\"Identifier\",\"name\":\"y\",\"loc\":{\"start\":{\"line\":1,\"column\":16},\"end\":{\"line\":1,\"column\":17}}},{\"type\":\"Identifier\",\"name\":\"z\",\"loc\":{\"start\":{\"line\":1,\"column\":19},\"end\":{\"line\":1,\"column\":20}}}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"loc\":{\"start\":{\"line\":2,\"column\":8},\"end\":{\"line\":2,\"column\":17}},\"value\":4,\"type\":\"Literal\",\"raw\":\"4\"},\"right\":{\"type\":\"Literal\",\"value\":3,\"raw\":\"3\"},\"loc\":{\"start\":{\"line\":2,\"column\":8},\"end\":{\"line\":2,\"column\":21}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"loc\":{\"start\":{\"line\":3,\"column\":15},\"end\":{\"line\":3,\"column\":28}},\"value\":11,\"type\":\"Literal\",\"raw\":\"11\"},\"loc\":{\"start\":{\"line\":3,\"column\":8},\"end\":{\"line\":3,\"column\":29}}}],\"loc\":{\"start\":{\"line\":2,\"column\":23},\"end\":{\"line\":4,\"column\":5}}},\"alternate\":{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"operator\":\"<\",\"left\":{\"loc\":{\"start\":{\"line\":4,\"column\":15},\"end\":{\"line\":4,\"column\":24}},\"value\":4,\"type\":\"Literal\",\"raw\":\"4\"},\"right\":{\"loc\":{\"start\":{\"line\":4,\"column\":27},\"end\":{\"line\":4,\"column\":32}},\"value\":6,\"type\":\"Literal\",\"raw\":\"6\"},\"loc\":{\"start\":{\"line\":4,\"column\":15},\"end\":{\"line\":4,\"column\":32}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"loc\":{\"start\":{\"line\":5,\"column\":15},\"end\":{\"line\":5,\"column\":32}},\"value\":12,\"type\":\"Literal\",\"raw\":\"12\"},\"loc\":{\"start\":{\"line\":5,\"column\":8},\"end\":{\"line\":5,\"column\":33}}}],\"loc\":{\"start\":{\"line\":4,\"column\":34},\"end\":{\"line\":6,\"column\":5}}},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"loc\":{\"start\":{\"line\":7,\"column\":15},\"end\":{\"line\":7,\"column\":32}},\"value\":14,\"type\":\"Literal\",\"raw\":\"14\"},\"loc\":{\"start\":{\"line\":7,\"column\":8},\"end\":{\"line\":7,\"column\":33}}}],\"loc\":{\"start\":{\"line\":6,\"column\":11},\"end\":{\"line\":8,\"column\":5}}},\"loc\":{\"start\":{\"line\":4,\"column\":11},\"end\":{\"line\":8,\"column\":5}}},\"loc\":{\"start\":{\"line\":2,\"column\":4},\"end\":{\"line\":8,\"column\":5}}}],\"loc\":{\"start\":{\"line\":1,\"column\":21},\"end\":{\"line\":8,\"column\":6}}},\"generator\":false,\"expression\":false,\"async\":false,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":8,\"column\":6}}}],\"sourceType\":\"script\",\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":8,\"column\":6}}},\"reds\":[1,5],\"ignoreList\":[]}'
        );
    });
});